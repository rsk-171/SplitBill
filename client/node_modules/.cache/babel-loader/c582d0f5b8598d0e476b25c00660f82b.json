{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactAutosuggest = require('react-autosuggest');\n\nvar _reactAutosuggest2 = _interopRequireDefault(_reactAutosuggest);\n\nvar _radium = require('radium');\n\nvar _radium2 = _interopRequireDefault(_radium);\n\nvar _reactThemeable = require('react-themeable');\n\nvar _reactThemeable2 = _interopRequireDefault(_reactThemeable);\n\nvar _theme = require('./theme');\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nvar _Chip = require('./Chip');\n\nvar _Chip2 = _interopRequireDefault(_Chip);\n\nvar _CallLimiter = require('./CallLimiter');\n\nvar _CallLimiter2 = _interopRequireDefault(_CallLimiter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Chips = function (_Component) {\n  _inherits(Chips, _Component);\n\n  function Chips(props) {\n    _classCallCheck(this, Chips);\n\n    var _this = _possibleConstructorReturn(this, (Chips.__proto__ || Object.getPrototypeOf(Chips)).call(this, props));\n\n    _this.componentWillReceiveProps = function (nextProps) {\n      _this.asyncSuggestLimiter.interval = 1000 / nextProps.fetchSuggestionsThrushold;\n    };\n\n    _this.onBlur = function (e) {\n      _this.refs.wrapper.focus();\n    };\n\n    _this.onFocus = function (e) {\n      _this.refs.wrapper.blur();\n    };\n\n    _this.handleKeyDown = function (e) {\n      if (e.keyCode === 13 && _this.lastEvent === e) {\n        _this.lastEvent = null;\n        return;\n      }\n\n      if (!_this.props.fromSuggestionsOnly && (_this.props.createChipKeys.includes(e.keyCode) || _this.props.createChipKeys.includes(e.key))) {\n        e.preventDefault();\n        if (_this.state.value.trim()) _this.addChip(_this.state.value);\n      }\n\n      if (e.keyCode === 8) {\n        _this.onBackspace();\n      } else if (_this.state.chipSelected) {\n        _this.setState({\n          chipSelected: false\n        });\n      }\n    };\n\n    _this.onBackspace = function (code) {\n      if (_this.state.value === \"\" && _this.props.value.length > 0) {\n        if (_this.state.chipSelected) {\n          var nextChips = _this.props.value.slice(0, -1);\n\n          _this.setState({\n            chipSelected: false,\n            chips: nextChips\n          });\n\n          _this.props.onChange(nextChips);\n        } else {\n          _this.setState({\n            chipSelected: true\n          });\n        }\n      }\n    };\n\n    _this.addChip = function (value) {\n      if (_this.props.uniqueChips && _this.props.value.indexOf(value) !== -1) {\n        _this.setState({\n          value: \"\"\n        });\n\n        return;\n      }\n\n      var chips = [].concat(_toConsumableArray(_this.props.value), [value]);\n\n      _this.props.onChange(chips);\n\n      _this.setState({\n        value: \"\"\n      });\n    };\n\n    _this.removeChip = function (idx) {\n      return function () {\n        var left = _this.props.value.slice(0, idx);\n\n        var right = _this.props.value.slice(idx + 1);\n\n        var nextChips = [].concat(_toConsumableArray(left), _toConsumableArray(right));\n\n        _this.props.onChange(nextChips);\n      };\n    };\n\n    _this.renderChips = function () {\n      return _this.props.value.map(function (chip, idx) {\n        return _react2.default.cloneElement(_this.props.renderChip(chip, _this.props.chipTheme), {\n          selected: _this.state.chipSelected && idx === _this.props.value.length - 1,\n          onRemove: _this.removeChip(idx),\n          index: idx,\n          key: 'chip' + idx\n        });\n      });\n    };\n\n    _this.filterUniqueChips = function (suggestions) {\n      var _this$props = _this.props,\n          value = _this$props.value,\n          getChipValue = _this$props.getChipValue,\n          getSuggestionValue = _this$props.getSuggestionValue;\n      return suggestions.filter(function (suggestion) {\n        return !value.some(function (chip) {\n          return getChipValue(chip) == getSuggestionValue(suggestion);\n        });\n      });\n    };\n\n    _this.callFetchSuggestions = function (fetchSuggestions, value, canceled) {\n      var uniqueChips = _this.props.uniqueChips;\n\n      var callback = function callback(suggestions) {\n        if (!canceled.isCancaled()) {\n          _this.setState({\n            loading: false,\n            suggestions: uniqueChips ? _this.filterUniqueChips(suggestions) : suggestions\n          });\n        }\n      };\n\n      var suggestionResult = fetchSuggestions.call(_this, value, callback);\n\n      if (suggestionResult && 'then' in suggestionResult) {\n        // To Support Promises\n        suggestionResult.then(callback);\n      }\n    };\n\n    _this.onSuggestionsFetchRequested = function (_ref) {\n      var value = _ref.value;\n      var _this$props2 = _this.props,\n          uniqueChips = _this$props2.uniqueChips,\n          suggestions = _this$props2.suggestions,\n          fetchSuggestions = _this$props2.fetchSuggestions,\n          suggestionsFilter = _this$props2.suggestionsFilter;\n\n      if (fetchSuggestions) {\n        _this.setState({\n          loading: true\n        });\n\n        _this.asyncSuggestLimiter.invoke(fetchSuggestions, value);\n      } else {\n        _this.setState({\n          suggestions: (uniqueChips ? _this.filterUniqueChips(suggestions) : suggestions).filter(function (opts) {\n            return suggestionsFilter(opts, value);\n          })\n        });\n      }\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.onSuggestionSelected = function (e, _ref2) {\n      var suggestion = _ref2.suggestion;\n      _this.lastEvent = e;\n\n      _this.addChip(suggestion);\n\n      _this.setState({\n        value: ''\n      });\n    };\n\n    _this.onChange = function (e, _ref3) {\n      var newValue = _ref3.newValue;\n\n      if (!_this.props.fromSuggestionsOnly && newValue.indexOf(',') !== -1 && _this.props.createChipKeys.includes(9)) {\n        var chips = newValue.split(\",\").map(function (val) {\n          return val.trim();\n        }).filter(function (val) {\n          return val !== \"\";\n        });\n        chips.forEach(function (chip) {\n          _this.addChip(chip);\n        });\n      } else {\n        _this.setState({\n          value: newValue\n        });\n      }\n    };\n\n    _this.state = {\n      loading: false,\n      value: \"\",\n      chipSelected: false,\n      suggestions: []\n    };\n    _this.asyncSuggestLimiter = new _CallLimiter2.default(_this.callFetchSuggestions.bind(_this), 1000 / props.fetchSuggestionsThrushold);\n    return _this;\n  }\n\n  _createClass(Chips, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _state = this.state,\n          loading = _state.loading,\n          value = _state.value,\n          suggestions = _state.suggestions;\n      var _props = this.props,\n          placeholder = _props.placeholder,\n          renderLoading = _props.renderLoading;\n      var themr = (0, _reactThemeable2.default)(this.props.theme);\n      var inputProps = {\n        placeholder: placeholder,\n        value: value,\n        onChange: this.onChange,\n        onKeyDown: this.handleKeyDown,\n        onBlur: this.onBlur,\n        onFocus: this.onFocus\n      };\n      return _react2.default.createElement('div', _extends({}, themr(200, 'chipsContainer'), {\n        ref: 'wrapper'\n      }), this.renderChips(), _react2.default.createElement(_reactAutosuggest2.default, _extends({}, this.props, {\n        theme: this.props.theme,\n        suggestions: this.state.suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: function getSuggestionValue(val) {\n          return _this2.state.value;\n        },\n        inputProps: inputProps,\n        onSuggestionSelected: this.onSuggestionSelected\n      })), loading ? renderLoading() : null);\n    }\n  }]);\n\n  return Chips;\n}(_react.Component);\n\nChips.propTypes = {\n  value: _propTypes2.default.array.isRequired,\n  onChange: _propTypes2.default.func,\n  placeholder: _propTypes2.default.string,\n  theme: _propTypes2.default.object,\n  chipTheme: _propTypes2.default.object,\n  suggestions: _propTypes2.default.array,\n  fetchSuggestions: _propTypes2.default.func,\n  fetchSuggestionsThrushold: _propTypes2.default.number,\n  fromSuggestionsOnly: _propTypes2.default.bool,\n  uniqueChips: _propTypes2.default.bool,\n  renderChip: _propTypes2.default.func,\n  suggestionsFilter: _propTypes2.default.func,\n  getChipValue: _propTypes2.default.func,\n  createChipKeys: _propTypes2.default.array,\n  getSuggestionValue: _propTypes2.default.func,\n  renderSuggestion: _propTypes2.default.func,\n  shouldRenderSuggestions: _propTypes2.default.func,\n  alwaysRenderSuggestions: _propTypes2.default.bool,\n  highlightFirstSuggestion: _propTypes2.default.bool,\n  focusInputOnSuggestionClick: _propTypes2.default.bool,\n  multiSection: _propTypes2.default.bool,\n  renderSectionTitle: _propTypes2.default.func,\n  getSectionSuggestions: _propTypes2.default.func\n};\nChips.defaultProps = {\n  placeholder: '',\n  theme: _theme2.default,\n  chipTheme: _theme.chipTheme,\n  suggestions: [],\n  fetchSuggestions: null,\n  fetchSuggestionsThrushold: 10,\n  createChipKeys: [9],\n  fromSuggestionsOnly: false,\n  uniqueChips: true,\n  getSuggestionValue: function getSuggestionValue(s) {\n    return s;\n  },\n  value: [],\n  onChange: function onChange() {},\n  renderChip: function renderChip(value, customTheme) {\n    return _react2.default.createElement(_Chip2.default, {\n      theme: customTheme\n    }, value);\n  },\n  renderLoading: function renderLoading() {\n    return _react2.default.createElement('span', null, 'Loading...');\n  },\n  renderSuggestion: function renderSuggestion(suggestion, _ref4) {\n    var query = _ref4.query;\n    return _react2.default.createElement('span', null, suggestion);\n  },\n  suggestionsFilter: function suggestionsFilter(opt, val) {\n    return opt.toLowerCase().indexOf(val.toLowerCase()) !== -1;\n  },\n  getChipValue: function getChipValue(item) {\n    return item;\n  }\n};\nexports.default = (0, _radium2.default)(Chips);","map":null,"metadata":{},"sourceType":"script"}