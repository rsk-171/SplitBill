{"ast":null,"code":"import axios from 'axios';\nexport const instance = axios.create({\n  baseURL: 'http://localhost:1234/',\n  timeout: 4000 //     headers: {'reqcomingfrom': 'web','lang':'en','accept':'json','apikey':'ABCD123'}\n  //   \n\n});\nexport default function setAuthorizationToken(token) {\n  if (token) {\n    instance.defaults.headers.common['Authorization'] = \"Bearer \".concat(token);\n  } else {\n    delete instance.defaults.headers.common['Authorization'];\n  }\n} // instance.interceptors.request.use(function (config) {\n//     // Do something before request is sent\n//     // console.log(\"Request Interceptor Call\"+localStorage.tokenId );\n//     // config.headers['token']=localStorage.tokenId;\n//     return config;\n//   }, function (error) {\n//     // Do something with request error\n//     return Promise.reject(error);\n//   });","map":{"version":3,"sources":["C:\\Users\\HP\\Desktop\\New folder\\SplitBill\\client\\src\\utils\\AxiosConfig.js"],"names":["axios","instance","create","baseURL","timeout","setAuthorizationToken","token","defaults","headers","common"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAE,wBADwB;AAEjCC,EAAAA,OAAO,EAAE,IAFwB,CAGrC;AACA;;AAJqC,CAAb,CAAjB;AAQP,eAAe,SAASC,qBAAT,CAA+BC,KAA/B,EAAqC;AAChD,MAAGA,KAAH,EAAS;AACLL,IAAAA,QAAQ,CAACM,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiC,eAAjC,qBAA8DH,KAA9D;AAEH,GAHD,MAGK;AACD,WAAOL,QAAQ,CAACM,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiC,eAAjC,CAAP;AACH;AACJ,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\r\nexport const instance = axios.create({\r\n    baseURL: 'http://localhost:1234/',\r\n    timeout: 4000,\r\n//     headers: {'reqcomingfrom': 'web','lang':'en','accept':'json','apikey':'ABCD123'}\r\n//   \r\n}\r\n);\r\n\r\nexport default function setAuthorizationToken(token){\r\n    if(token){\r\n        instance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\n    }else{\r\n        delete instance.defaults.headers.common['Authorization'];\r\n    }\r\n}\r\n// instance.interceptors.request.use(function (config) {\r\n//     // Do something before request is sent\r\n//     // console.log(\"Request Interceptor Call\"+localStorage.tokenId );\r\n//     // config.headers['token']=localStorage.tokenId;\r\n//     return config;\r\n//   }, function (error) {\r\n//     // Do something with request error\r\n//     return Promise.reject(error);\r\n//   });"]},"metadata":{},"sourceType":"module"}